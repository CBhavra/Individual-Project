if team_form.validate_on_submit():
        teams.name=team_form.name.data, country=team_form.country.data, league=team_form.league.data
        db.session.add(new_team)
        db.session.commit()

        return redirect(url_for('home'))
    else:
        return render_template('home.html', teams=teams, team_form=team_form)



        # STATISTICS

@app.route('/stats')
def home_stats():
    stats = Stats.query.all()

    result = 'My stats'
    for stat in stats:
        result += f'{stat.description}     {stat.completed}\n'

    return result


@app.route('/stats/create', methods=['GET','POST'])
def create_stats(stat):
    stats = Stats.query.all()
    form = Statsform()
    
    if request.method == 'POST':
        new_stat = Stats(stat=form.stat.data, runs=form.runs.data, wickets=form.wickets.data)
        db.session.add(new_stat)
        db.session.commit()

        return redirect(url_for('home'))
    else: 
        return render_template('create.html', form=form)


@app.route('/stats/update', methods=['GET','POST'])
def update_stats(description, id):
    stat = Stats.query.get(id)
    form = Statsform

    if request.method == 'POST':
        stat.description = description 
        db.session.add(stat=form.stat.data, runs=form.runs.data, wickets=form.wickets.data)
        db.session.commit()

        return redirect(url_for('home'))
    else: 
        return render_template('create.html', form=form)



@app.route('/stats/delete', methods=['GET','POST'])
def delete_stats(id):
    stat = Stats.query.get(id)
    form = Statsform()
    
    if request.method == 'POST':
        db.session.delete(stat=form.stat.data, runs=form.runs.data, wickets=form.wickets.data)
        db.session.commit()

        return redirect(url_for('home'))
    else: 
        return render_template('create.html', form=form)